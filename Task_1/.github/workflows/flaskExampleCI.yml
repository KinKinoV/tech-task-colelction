# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Flask app CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  
  Build:
    name: Building Flask app
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Testing installation of the flaskExample package
      run: |
        cd python_app
        pip install -e.
    
  Test-Local:
    name: Running tests locally using pytest
    runs-on: ubuntu-latest
    needs: [Build]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        cd python_app
        pip install -e .
        pytest
        pip uninstall -y flaskExample
  
  Deploy:
    name: Deploying to AWS infrastructure
    runs-on: ubuntu-latest
    needs: [Test-Local]
    environment:
      name: Development

    steps:
    - name: Deploying in EC2
      env:
        PRIVATE_KEY: ${{secrets.AWS_PRIVATE_KEY}}
        HOST_NAME: ${{secrets.HOST_NAME}}
        USER_NAME: ${{secrets.USER_NAME}}
        APP_DIR: ${{secrets.APP_DIR}}
        SERVICE_NAME: ${{secrets.SERVICE_NAME}}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "
          cd ${APP_DIR} &&
          git pull &&
          sudo systemctl restart ${SERVICE_NAME} "
  
  Test-Remote:
    name: Testing deployment
    runs-on: ubuntu-latest
    needs: [Deploy]
    environment:
      name: Development
    
    steps:
    - name: Testing application
      run: |
        sleep 5
        curl ${{ secrets.SITE_DNS }}/hello | grep "Hello, world!"
    


